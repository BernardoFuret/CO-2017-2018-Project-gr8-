#include <map>
#include <string>
#include <vector>
#include "targets/xml_writer.h"
#include "targets/type_checker.h"
#include "ast/all.h"  // automatically generated

/**
 * Helper functions.
 */
inline std::string toStr( bool b ) {
  return b ? "true" : "false";
}

std::string stringifyGr8Pointers( std::vector<std::string> v, basic_type* t ) {
  
  unsigned long int t_name = t->name();
  std::string gr8_type = std::string("");

  std::map<unsigned long int,std::string> types;
  types[1UL << 0] = "small";
  types[1UL << 1] = "huge";
  types[1UL << 3] = "news";

  if ( t_name == (1UL << 4) ) {
    v.push_back( std::string("*") );
    return stringifyGr8Pointers( v, t->subtype() );
  }

  std::string ret = std::string( types[t_name] );
  if ( ret.size() ) {
    v.push_back( ret );
    if ( ret == "news" ) {
      // tenho ["*","*","news"]
      for ( std::vector<int>::size_type i = 0; i < v.size(); i++ ) {
        if ( v[i] == std::string("*") ) {
          gr8_type += "fake ";
        } else {
          gr8_type += v[i];
        }
      }
    } else {
      // tenho ["*","*","small"] || ["*","*","huge"]
      for ( std::vector<int>::size_type i = 0; i < v.size(); i++ ) {
        if ( v[i] == std::string("*") ) {
          gr8_type += (v.back() + std::string(" "));
        } else {
          gr8_type += "fake";
        }
      }
    }

    return gr8_type;
  }

  return "unknown type";

}

inline std::string toStr( basic_type* t ) {
  
  unsigned long int t_name = t->name();

  std::vector<std::string> pointer_parts;

  std::map<unsigned long int,std::string> types;
  types[1UL << 0] = "small";
  types[1UL << 1] = "huge";
  types[1UL << 3] = "news";
  types[1UL <<30] = "void";

  if ( t_name == (1UL << 4) ) {
    //return "* " + toStr( t->subtype() );
    pointer_parts.push_back( std::string("*") );
    return stringifyGr8Pointers( pointer_parts, t->subtype() );
  }

  std::string ret = std::string( types[t_name] );
  return ret.size() ? ret : "unknown type";
}
//---------------------------------------------------------------------------
//------------GENERATED BY MK-VISITOR-SKEL.pl--------------------------------

void gr8::xml_writer::do_sweeping_from_to_by_do_node(gr8::sweeping_from_to_by_do_node *const node, int lvl) {
  openTag(node, lvl);
  
    openTag("leftvalue", lvl + 2);
      node->lvalue()->accept(this, lvl + 4);
    closeTag("leftvalue", lvl + 2);

    openTag("from", lvl + 2);
      node->from_expression()->accept(this, lvl + 4);
    closeTag("from", lvl + 2);
    
    openTag("to", lvl + 2);
      node->to_expression()->accept(this, lvl + 4);
    closeTag("to", lvl + 2);
    
    openTag("by", lvl + 2);
      node->by_expression()->accept(this, lvl + 4);
    closeTag("by", lvl + 2);
    
    openTag("block", lvl + 2);
      node->block()->accept(this, lvl + 4);
    closeTag("block", lvl + 2);
  
  closeTag(node, lvl);
}
void gr8::xml_writer::do_post_node(gr8::post_node *const node, int lvl) {
  openTag(node, lvl);
  node->argument()->accept(this, lvl + 2);
  closeTag(node, lvl);
}
void gr8::xml_writer::do_tweet_node(gr8::tweet_node *const node, int lvl) {
  openTag(node, lvl);
  node->argument()->accept(this, lvl + 2);
  closeTag(node, lvl);
}
void gr8::xml_writer::do_return_node(gr8::return_node *const node, int lvl) {
  openTag(node, lvl);
  if ( node->argument() != nullptr ) {
    node->argument()->accept(this, lvl + 2);
  } else {
     os() << std::string(lvl + 2, ' ') << "nullptr" << std::endl;
  }
  closeTag(node, lvl);
}
void gr8::xml_writer::do_stop_node(gr8::stop_node *const node, int lvl) {
  openTag(node, lvl);
     os() << std::string(lvl + 2, ' ') << node->argument() << std::endl;
  closeTag(node, lvl);
}
void gr8::xml_writer::do_again_node(gr8::again_node *const node, int lvl) {
  openTag(node, lvl);
     os() << std::string(lvl + 2, ' ') << node->argument() << std::endl;
  closeTag(node, lvl);
}
void gr8::xml_writer::do_input_node(gr8::input_node *const node, int lvl) {
  openTag(node, lvl);
  closeTag(node, lvl);
}
void gr8::xml_writer::do_plus_node(gr8::plus_node *const node, int lvl) {
  do_unary_expression(node, lvl);
}
void gr8::xml_writer::do_function_declaration_node(gr8::function_declaration_node *const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);

    openTag("public", lvl + 2);
      os() << std::string(lvl + 4, ' ') << toStr( node->isPublic() ) << std::endl;
    closeTag("public", lvl + 2);

    openTag("type", lvl + 2);
      os() << std::string(lvl + 4, ' ') << toStr( node->type() ) << std::endl;
    closeTag("type", lvl + 2);

    openTag("name", lvl + 2);
      os() << std::string(lvl + 4, ' ') << node->name() << std::endl;
    closeTag("name", lvl + 2);

    openTag("parameters", lvl + 2);
      node->parameters()->accept(this, lvl + 4);
    closeTag("parameters", lvl + 2);
  
  closeTag(node, lvl);
}
void gr8::xml_writer::do_function_definition_node(gr8::function_definition_node *const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  _symtab.push(); // Open args' scope.
  openTag(node, lvl);

    openTag("public", lvl + 2);
      os() << std::string(lvl + 4, ' ') << toStr( node->isPublic() ) << std::endl;
    closeTag("public", lvl + 2);

    openTag("type", lvl + 2);
      os() << std::string(lvl + 4, ' ') << toStr( node->type() ) << std::endl;
    closeTag("type", lvl + 2);

    openTag("name", lvl + 2);
      os() << std::string(lvl + 4, ' ') << node->name() << std::endl;
    closeTag("name", lvl + 2);

    openTag("parameters", lvl + 2);
      node->parameters()->accept(this, lvl + 4);
    closeTag("parameters", lvl + 2);

    openTag("body", lvl + 2);
      node->body()->accept(this, lvl + 4);
    closeTag("body", lvl + 2);
  
  closeTag(node, lvl);
  _symtab.pop(); // Close args' scope.
}
void gr8::xml_writer::do_function_invocation_node(gr8::function_invocation_node *const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);

    openTag("name", lvl + 2);
      os() << std::string(lvl + 4, ' ') << node->name() << std::endl;
    closeTag("name", lvl + 2);

    openTag("arguments", lvl + 2);
      node->arguments()->accept(this, lvl + 4);
    closeTag("arguments", lvl + 2);
  
  closeTag(node, lvl);
}
void gr8::xml_writer::do_objects_node(gr8::objects_node *const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  do_unary_expression(node, lvl);
}
void gr8::xml_writer::do_address_node(gr8::address_node *const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  node->argument()->accept(this, lvl + 2);
  closeTag(node, lvl);
}
void gr8::xml_writer::do_cell_node(gr8::cell_node *const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);

    openTag("pointer", lvl + 2);
      node->pointer()->accept(this, lvl + 4);
    closeTag("pointer", lvl + 2);
  
    openTag("position", lvl + 2);
      node->position()->accept(this, lvl + 4);
    closeTag("position", lvl + 2);
  
  closeTag(node, lvl);
}
void gr8::xml_writer::do_block_node(gr8::block_node *const node, int lvl) {
  _symtab.push();
  openTag(node, lvl);
  
    openTag("declarations", lvl + 2);
      node->declarations()->accept(this, lvl + 4);
    closeTag("declarations", lvl + 2);

    openTag("instructions", lvl + 2);
      node->instructions()->accept(this, lvl + 4);
    closeTag("instructions", lvl + 2);
  
  closeTag(node, lvl);
  _symtab.pop();
}
void gr8::xml_writer::do_null_node(gr8::null_node *const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  closeTag(node, lvl);
}
void gr8::xml_writer::do_variable_declaration_node(gr8::variable_declaration_node *const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);

    openTag("use", lvl + 2);
      os() << std::string(lvl + 4, ' ') << /*std::boolalpha <<*/toStr( node->isUse() )/*<< std::noboolalpha*/ << std::endl;
    closeTag("use", lvl + 2);

    openTag("public", lvl + 2);
      os() << std::string(lvl + 4, ' ') << /*std::boolalpha <<*/toStr( node->isPublic() )/*<< std::noboolalpha*/ << std::endl;
    closeTag("public", lvl + 2);

    openTag("type", lvl + 2);
      os() << std::string(lvl + 4, ' ') << toStr( node->type() ) << std::endl;
    closeTag("type", lvl + 2);

    openTag("name", lvl + 2);
      os() << std::string(lvl + 4, ' ') << node->name() << std::endl;
    closeTag("name", lvl + 2);
  
    openTag("initial_value", lvl + 2);
    if ( node->initially() != nullptr ) {
      node->initially()->accept(this, lvl + 4);
    } else {
      os() << std::string(lvl + 4, ' ') << "nullptr" << std::endl;
    }
    closeTag("initial_value", lvl + 2);
  
  closeTag(node, lvl);
}


//---------------------------------------------------------------------------
//---------------------------------------------------------------------------

void gr8::xml_writer::do_nil_node(cdk::nil_node * const node, int lvl) {
  // CHECK
  openTag(node, lvl);
  closeTag(node, lvl);
}
void gr8::xml_writer::do_data_node(cdk::data_node * const node, int lvl) {
  // CHECK
  openTag(node, lvl);

    openTag("name", lvl + 2);
      os() << std::string(lvl + 4, ' ') << (node->bucket() != nullptr ? node->bucket() : "nullptr") << std::endl;
    closeTag("name", lvl + 2);
  
    openTag("name", lvl + 2);
      os() << std::string(lvl + 4, ' ') << node->size() << std::endl;
    closeTag("name", lvl + 2);

  closeTag(node, lvl);
}
void gr8::xml_writer::do_double_node(cdk::double_node * const node, int lvl) {
  // CHECK
  process_literal(node, lvl);
}
void gr8::xml_writer::do_not_node(cdk::not_node * const node, int lvl) {
  // CHECK
  do_unary_expression(node, lvl);
}
void gr8::xml_writer::do_and_node(cdk::and_node * const node, int lvl) {
  // CHECK
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_or_node(cdk::or_node * const node, int lvl) {
  // CHECK
  do_binary_expression(node, lvl);
}

//---------------------------------------------------------------------------

void gr8::xml_writer::do_sequence_node(cdk::sequence_node * const node, int lvl) {
  os() << std::string(lvl, ' ') << "<sequence_node size='" << node->size() << "'>" << std::endl;
  for (size_t i = 0; i < node->size(); i++)
    node->node(i)->accept(this, lvl + 2);
  closeTag(node, lvl);
}

//---------------------------------------------------------------------------

void gr8::xml_writer::do_integer_node(cdk::integer_node * const node, int lvl) {
  process_literal(node, lvl);
}

void gr8::xml_writer::do_string_node(cdk::string_node * const node, int lvl) {
  process_literal(node, lvl);
}

//---------------------------------------------------------------------------

void gr8::xml_writer::do_unary_expression(cdk::unary_expression_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  node->argument()->accept(this, lvl + 2);
  closeTag(node, lvl);
}

void gr8::xml_writer::do_neg_node(cdk::neg_node * const node, int lvl) {
  do_unary_expression(node, lvl);
}

//---------------------------------------------------------------------------

void gr8::xml_writer::do_binary_expression(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  node->left()->accept(this, lvl + 2);
  node->right()->accept(this, lvl + 2);
  closeTag(node, lvl);
}

void gr8::xml_writer::do_add_node(cdk::add_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_sub_node(cdk::sub_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_mul_node(cdk::mul_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_div_node(cdk::div_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_mod_node(cdk::mod_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_lt_node(cdk::lt_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_le_node(cdk::le_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_ge_node(cdk::ge_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_gt_node(cdk::gt_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_ne_node(cdk::ne_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}
void gr8::xml_writer::do_eq_node(cdk::eq_node * const node, int lvl) {
  do_binary_expression(node, lvl);
}

//---------------------------------------------------------------------------

void gr8::xml_writer::do_identifier_node(cdk::identifier_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  os() << std::string(lvl, ' ') << "<" << node->label() << ">" << node->name() << "</" << node->label() << ">" << std::endl;
}

void gr8::xml_writer::do_rvalue_node(cdk::rvalue_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  node->lvalue()->accept(this, lvl + 4);
  closeTag(node, lvl);
}

void gr8::xml_writer::do_assignment_node(cdk::assignment_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);

  node->lvalue()->accept(this, lvl);
  reset_new_symbol();

  node->rvalue()->accept(this, lvl + 4);
  closeTag(node, lvl);
}

//---------------------------------------------------------------------------

/*void gr8::xml_writer::do_program_node(gr8::program_node * const node, int lvl) {
  openTag(node, lvl);
  node->statements()->accept(this, lvl + 4);
  closeTag(node, lvl);
}*/

//---------------------------------------------------------------------------

void gr8::xml_writer::do_evaluation_node(gr8::evaluation_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  node->argument()->accept(this, lvl + 2);
  closeTag(node, lvl);
}

/*void gr8::xml_writer::do_print_node(gr8::print_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  node->argument()->accept(this, lvl + 2);
  closeTag(node, lvl);
}*/

//---------------------------------------------------------------------------

/*void gr8::xml_writer::do_read_node(gr8::read_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  node->argument()->accept(this, lvl + 2);
  closeTag(node, lvl);
}*/

//---------------------------------------------------------------------------

/*void gr8::xml_writer::do_while_node(gr8::while_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  openTag("condition", lvl + 2);
  node->condition()->accept(this, lvl + 4);
  closeTag("condition", lvl + 2);
  openTag("block", lvl + 2);
  node->block()->accept(this, lvl + 4);
  closeTag("block", lvl + 2);
  closeTag(node, lvl);
}*/

//---------------------------------------------------------------------------

void gr8::xml_writer::do_if_node(gr8::if_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  openTag("condition", lvl + 2);
  node->condition()->accept(this, lvl + 4);
  closeTag("condition", lvl + 2);
  openTag("then", lvl + 2);
  node->block()->accept(this, lvl + 4);
  closeTag("then", lvl + 2);
  closeTag(node, lvl);
}

void gr8::xml_writer::do_if_else_node(gr8::if_else_node * const node, int lvl) {
  ASSERT_SAFE_EXPRESSIONS;
  openTag(node, lvl);
  openTag("condition", lvl + 2);
  node->condition()->accept(this, lvl + 4);
  closeTag("condition", lvl + 2);
  openTag("then", lvl + 2);
  node->thenblock()->accept(this, lvl + 4);
  closeTag("then", lvl + 2);
  openTag("else", lvl + 2);
  node->elseblock()->accept(this, lvl + 4);
  closeTag("else", lvl + 2);
  closeTag(node, lvl);
}
